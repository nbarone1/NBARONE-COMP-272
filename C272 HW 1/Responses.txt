Responses for HW 1
1. The timing for all of them appears to be between O(1) and O(n) - so I would conjecture it closer to O(sqrt(n)),
on a log scale, all 4 algorithms move at a seemingly constant slope and remain relatively flat. By nature of a log scale,
the flatter the line the closer to O(1) the algorithm is, while a steeper line implies a higher degree time complexity.
MaxSubSum1 does appear to have the highest time complexity.

a[] = { 4,-3,5,-2,-1,-2,6,-2}

2.a) MaxSubSum1
    1) load in the array as the variable a
    2) starting a index 0, set seqstart at 0 and set seqend at 0, then sum terms between start and end
        a) maxsum = highest value of one of the sequences as the algorithm passes through
        b) increase seqend until it hits the length of a
        c) once that seqend has been reached from that start point, move the start point and repeat
  b) MaxSubSum2
    1) load in matrix a
    2) set index to 0 as start, start by summing the terms from the start 1 by 1 to the end
        a) when sum of terms exceeds maxsum, set start and end points for it
        b) continuing to iterate through until all possibilities have been checked
  c) MaxSubSum3
   1) Utilize maxSumRec, which uses max3
   2) max3 - returns 3 numbers in max order
   3) maxSumRec
    i) finds max sum of all elements of the array
    ii) splits into left and right subarrays
    iii) sum those arrays
    iv) repeat until subarrays contain one element
   4) returns result of maxSumRec
  d) MaxSubSum4
   1) start at index 0
   2) sum terms until this sum goes below 0
    a) then shift the start term being checked up and continue seeking max sum
        ii) maxsum updated when surpased by currentsumation
    b) repeat searching down the array and adding terms until same conditions are hit